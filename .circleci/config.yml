# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

commands:

  install-base-dependencies:
    description: Install dependencies for our app
    steps:
      - run:
          name: Install dependencies
          command: |
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

  install-aws-cli-dependencies:
    description: Install dependencies for aws-cli docker and kubernetes
    steps:
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            echo -e "[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nexclude=kubelet kubeadm kubectl\n" >> /etc/yum.repos.d/kubernetes.repo
            yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

  setup-deployment-environment:
    description: Sets environment variables for deployment.
    steps:
      - run:
          name: Set environment variables
          command: |
            ### Initialize .env ###
            echo export CLUSTER_NAME="MyEKSCluster" > .env
            echo export DOCKERPATH="$DOCKER_LOGIN/$REPO_NAME:$TAG"
            echo export REPO_NAME="base" >> .env
            echo export TAG="cn_news_clusters" >> .env
            source .env
            ### Set up AWS Credentials ###
            mkdir ~/.aws
            echo -e "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\nregion=$AWS_DEFAULT_REGION\n" > ~/.aws/credentials
            export CONTEXT=$(aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $CLUSTER_NAME \
              | cut -d " " -f 4)
            echo export CONTEXT=$CONTEXT >> .env
            cat .env
            source .env
            kubectl config view
            ### Get current deployment information ###
            chmod +x ./kubernetes/get_current_deployment.sh
            source ./kubernetes/get_current_deployment.sh
            echo COLOR_ACTIVE=$COLOR_ACTIVE >> .env
            echo COLOR_TEST=$COLOR_TEST >> .env
            source .env

  destroy-test-environment-on-fail:
    description: Deletes the test environment from the cluster
    steps:
      - run:
          name: Delete test environment.
          when: on_fail
          command: |
            ./kubernetes/cleanup.sh $COLOR_TEST

  cleanup-old-environment:
    description: Deletes the previously active environment
    steps:
      - run:
          name: Delete previously active environment.
          command: |
            ./kubernetes/cleanup.sh $COLOR_ACTIVE

jobs:

  build:
    docker:
      - image: ewkoch3/base:test
    working_directory: ~/repo
    steps:
      - checkout
      - install-base-dependencies
      - run:
          name: run lint
          command: |
            pip3 install pylint
            make lint
  
  test:
    docker:
      - image: ewkoch3/base:test
    working_directory: ~/repo
    steps:
      - checkout
      - install-base-dependencies
      - run:
          name: run tests
          command: |
            pip3 install pytest pytest-mock
            make test
            
  analyze:
    docker:
      - image: ewkoch3/base:test
    working_directory: ~/repo
    steps:
      - checkout
      - install-base-dependencies
      - run:
          name: run security scan
          command: |
            pip3 install bandit
            make scan
  
  push_container:
    machine: true
    steps:
     - checkout
     - run:
        name: Build and tag container, then push to dockerhub
        command: |
          export dockerpath="ewkoch3/base"
          export tag="cn_news_clusters"
          docker build . --tag=$tag
          echo "$DOCKER_PWD" | docker login --username $DOCKER_LOGIN --password-stdin
          docker tag $tag $dockerpath:$tag
          docker push "$dockerpath:$tag"
          docker push "$dockerpath:$tag"

  stage:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/repo
    steps:
      - checkout
      - install-aws-cli-dependencies
      - setup-deployment-environment
      - run:
          name: Stage a new deployment.
          command: |
            source .env
            kubectl config view
            kubectl config use-context $CONTEXT
            kubectl get svc
            kubectl get pods
            chmod +x ./kubernetes/get_current_deployment.sh ./kubernetes/stage_for_deployment.sh ./kubernetes/run_smoke_test.sh ./kubernetes/cleanup.sh
            ./kubernetes/stage_for_deployment.sh
            echo active is $COLOR_ACTIVE
            pwd
            ls
      - persist_to_workspace:
          root: ~/
          paths:
            - repo/.env
            - .aws/credentials

  smoke_test:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/repo
    steps:
      - checkout
      - install-aws-cli-dependencies
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy Docker Container to Kubernetes
          command: |
            pwd
            ls
            cat ~/repo/.env
            echo $COLOR_TEST
            if $(./kubernetes/run_smoke_test.sh) | grep "Success"
            then
                return 0
            else
                return 1
            fi
      - destroy-test-environment-on-fail

  deploy:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/repo
    steps:
      - checkout
      - install-aws-cli-dependencies
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy Docker Container to Kubernetes
          command: |
            ./kubernetes/set_active_deployment.sh $COLOR_TEST
      - destory-test-environment-on-fail
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/repo
    steps:
      - checkout
      - install-aws-cli-dependencies
      - attach_workspace:
          at: ~/
      - destroy-old-environment

workflows:
  default:
    jobs:
      # - build
      # - test:
      #     requires: [build]
      # - analyze:
      #     requires: [build]
      # - push_container:
      #     requires: [test, analyze]
      - stage:
          # requires: [push_container]
          filters:
            branches:
              only: ["main"]
      - smoke_test:
          requires: [stage]
      - deploy:
          requires: [smoke_test]
      - cleanup:
          requires: [deploy]



